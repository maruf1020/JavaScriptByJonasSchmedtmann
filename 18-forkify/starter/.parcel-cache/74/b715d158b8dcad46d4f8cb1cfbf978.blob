"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//parcel 2
class View {
  constructor() {
    _defineProperty(this, "_data", void 0);
  }

  render(data) {
    if (!data || Array.isArray(data) && data.length === 0) {
      this.renderError();
      return;
    }

    this._data = data;

    const markup = this._generateMarkup();

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  update(data) {
    if (!data || Array.isArray(data) && data.length === 0) {
      this.renderError();
      return;
    }

    this._data = data;

    const newMarkup = this._generateMarkup();

    const newDOM = document.createRange().createContextualFragment(newMarkup);
    const newElements = Array.from(newDOM.querySelectorAll('*'));
    const curElements = Array.from(this._parentElement.querySelectorAll('*'));
    newElements.forEach((newEL, i) => {
      var _newEL$firstChild;

      const curEL = curElements[i];
      console.log(curEL, newEL.isEqualNode(curEL));

      if (!newEL.isEqualNode(curEL) && ((_newEL$firstChild = newEL.firstChild) === null || _newEL$firstChild === void 0 ? void 0 : _newEL$firstChild.nodeValue.trim()) !== '') {
        var _newEL$firstChild2;

        console.log('ðŸ”¥', (_newEL$firstChild2 = newEL.firstChild) === null || _newEL$firstChild2 === void 0 ? void 0 : _newEL$firstChild2.nodeValue.trim());
        curEL.textContent = newEL.textContent;
      }
    });
  }

  _clear() {
    this._parentElement.innerHTML = '';
  }

  randerSpinner() {
    const markup = `
    <div class="spinner">
            <svg>
              <use href="${_icons.default}#icon-loader"></use>
            </svg>
          </div>
    `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderError(message = this._errorMessage) {
    const markup = `
          <div class="error">
            <div>
              <svg>
                <use href="${_icons.default}#icon-alert-triangle"></use>
              </svg>
            </div>
            <p>${message}</p>
          </div>
    `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderMessage(message = this._message) {
    const markup = `
          <div class="message">
            <div>
              <svg>
                <use href="${_icons.default}#icon-smile"></use>
              </svg>
            </div>
            <p>${message}</p>
          </div>
    `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

}

exports.default = View;